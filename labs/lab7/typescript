Script started on Sat 04 Mar 2017 09:48:49 PM EST
liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ lab[K[K[Kgcc lab7.c -o lab7
liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ ./lab7 5 8
keyboard event CTRL-C and CTRL-Z were ignored.
I am the parent with pid 29201, start to wait the child 29202
I am the child with pid 29202 of process id 29201
parent process's time to live in 4s.
child process's time to live in 7s
parent process's time to live in 3s.
child process's time to live in 6s
parent process's time to live in 2s.
child process's time to live in 5s
parent process's time to live in 1s.
child process's time to live in 4s
parent process's time to live in 0s.
the parent died or terminated.
child process's time to live in 3s
liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ child process's time to live in 2s
child process's time to live in 1s
child process's time to live in 0s
erro on sending message by child.

liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ ./lab7 5 8[K[K[K8 5
keyboard event CTRL-C and CTRL-Z were ignored.
I am the parent with pid 29204, start to wait the child 29205
I am the child with pid 29205 of process id 29204
parent process's time to live in 7s.
child process's time to live in 4s
parent process's time to live in 6s.
child process's time to live in 3s
parent process's time to live in 5s.
child process's time to live in 2s
parent process's time to live in 4s.
child process's time to live in 1s
child process's time to live in 0s
parent process's time to live in 3s.
the child died or terminated.
parent process's time to live in 2s.
parent process's time to live in 1s.
parent process's time to live in 0s.
liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ pr[K[Kcat .[Klab7.c
// 1. The program disables the CTRL-C and CTRL-Z sensitivity. (be careful if your program hands to do the ps command and kill the process)

// 2. The program implements the timer alarm.

// Logic of the program:

// The program will launch a child.

// The child will stay alive for a specified number of seconds between 1 and 10 (by a parameter) and then terminates.

// The parent will stay alive for a specified number of seconds between 1 and 10 (by parameter) and then terminates.

// Each of the child and parent will print a count-down every second to display how many seconds they have to live.

// Consider the cases your program should report:

// if the child dies before the parent dies: parent declares that the child is dead by displaying a message on the screen

// if the child dies after the parent dies: the child declares it is an orphan by displaying a message on the screen

// Test your code under the two circumstances and use a script file to log and submit your output.

#include <sys/signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>

void pEvent() {
	printf("the parent died or terminated.\n");
}

void cEvent() {
	printf("the child died or terminated.\n");
}

int main(int argc, char *argv[]) {
	// process the arguments 
	if (argc != 3) {
		printf("Arguments error!\n");
		printf("Usage:\n");
		printf("%s [parent TTL] [child TTL]\n",argv[0]);
		exit(-1);
	}

	int pttl,cttl;

	if ( (pttl = atoi(argv[1])) == 0 || (cttl = atoi(argv[2])) == 0 ) {
		printf("Arguments error! TTL should be integer.\n");
		printf("Usage:\n");
		printf("%s [parent TTL] [child TTL]\n",argv[0]);
		exit(-1);
	}
	//process the code

	int status = -1;
	pid_t pid,cpid;
	//disable CTL-C and CTL-Z to signal
	signal(SIGINT,SIG_IGN);
	signal(SIGTSTP,SIG_IGN);
	//bind child event
	signal(SIGALRM,cEvent);
	printf("keyboard event CTRL-C and CTRL-Z were ignored.\n");
	//fork child
	pid = fork();
	if (pid  == 0) {
		//child process tasks
		//bind parent event
		signal(SIGALRM,pEvent);
		
		printf("I am the child with pid %d of process id %d\n",getpid(),getppid());
		int n = cttl;

		while(n--) {
			sleep(1); 
			printf("child process's time to live in %ds\n",n);
		}
		//send signal to parent before dying	
		if ( kill(getppid(),SIGALRM) == -1 ) printf("erro on sending message by child.\n");
		_exit(0);

	} else if(pid < 0) {
		printf("Error to fork new child process.\n");
	}
	//parents tasks
	cpid = pid;
	printf("I am the parent with pid %d, start to wait the child %d\n",getpid(),cpid);
	waitpid(pid,&status,1);

	int m = pttl;
	while(m--) {
		sleep(1);
		printf("parent process's time to live in %ds.\n",m);
	}
	//send signal to child beofe dying	
	if ( kill(cpid,SIGALRM) == -1 ) printf("erro on sending message by parent\n");
	exit(0);

}
liu1ee@alpha:~/workspace/AdvancedSystemProgramming/labs/lab7$ exit
exit

Script done on Sat 04 Mar 2017 09:49:55 PM EST
